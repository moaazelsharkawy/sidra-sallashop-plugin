<?php

/**
 * Plugin Name: Sidracoin Payment for WooCommerce
 * Plugin URI: https://sidra.salla-shop.com/
 * Author: Moaaz Elsharkawy
 * Author URI: https://sidra.salla-shop.com/
 * Description: This plugin allows for payments with Sidra Coin.
 * Version: 0.1.0
 * License: GPL-2.0-or-later
 * License URI: http://www.gnu.org/licenses/gpl-2.0.txt
 */

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

add_filter('woocommerce_payment_gateways', 'add_to_woo_sidrasalla_payment_gateway');

function add_to_woo_sidrasalla_payment_gateway($gateways)
{
    $gateways[] = 'WC_Sidrasalla_Payment_Gateway';
    return $gateways;
}

if (!class_exists('WC_Sidrasalla_Payment_Gateway')) {

    add_action('plugins_loaded', 'sidrasalla_payment_init', 11);

    function sidrasalla_payment_init()
    {
        class WC_Sidrasalla_Payment_Gateway extends WC_Payment_Gateway
        {

            public function __construct()
            {
                $this->id                 = 'sidrasalla_payment';
                $this->icon = apply_filters( 'woocommerce_sidrasalla_icon', 'https://sidra.salla-shop.com/wp-content/uploads/2024/04/paylog3.png' );
                $this->has_fields         = false;
                $this->method_title       = __('Sidrasalla Payment', 'sidrasalla-pay-woo');
                $this->method_description = __('Salla Sidra payment systems.', 'sidrasalla-pay-woo');

                $this->title        = $this->get_option('title');
                $this->description  = $this->get_option('description');
                $this->instructions = __('يرجى إرسال %s Sidra Coin عن طريق استخدام العنوان:', 'sidrasalla-pay-woo') . '<br><strong>%s</strong>.<br>' . __('بمجرد الانتهاء من ذلك، يرجى إدخال هاش المعاملة بالأسفل.', 'sidrasalla-pay-woo');                 
                $this->init_form_fields();
                $this->init_settings();

                add_action('woocommerce_update_options_payment_gateways_' . $this->id, array($this, 'process_admin_options'));
            }

            public function init_form_fields()
            {
                $this->form_fields = array(
                    'enabled'     => array(
                        'title'       => __('Enable/Disable', 'sidrasalla-pay-woo'),
                        'label'       => __('Enable Crypto Sallasidra Gateway', 'sidrasalla-pay-woo'),
                        'type'        => 'checkbox',
                        'description' => '',
                        'default'     => 'no',
                    ),
                    'title'       => array(
                        'title'       => __('Title', 'sidrasalla-pay-woo'),
                        'type'        => 'text',
                        'description' => __('This controls the title which the user sees during checkout.', 'sidrasalla-pay-woo'),
                        'default'     => 'Crypto',
                        'desc_tip'    => true,
                    ),
                    'description' => array(
                        'title'       => __('Description', 'sidrasalla-pay-woo'),
                        'type'        => 'textarea',
                        'description' => __('This controls the description which the user sees during checkout.', 'sidrasalla-pay-woo'),
                        'default'     => 'Pay with cryptocurrency via our super-cool payment gateway.',
                    ),
                    'address'     => array(
                        'title' => __('Wallet address', 'sidrasalla-pay-woo'),
                        'type'  => 'text',
                    ),
                );
            }

            public function payment_fields()
{
    if ($this->description) {
        echo wpautop(wptexturize($this->description));
    }

    echo '<p>' . sprintf($this->instructions, $this->get_order_total(), $this->get_option('address')) . '</p>';
    ?>
    <p><?php _e("ادخل هاش المعاملة:", 'sidrasalla-pay-woo'); ?></p>
    <p class="form-row form-row-wide">
        <input type="text" name="txid" placeholder="<?php _e('Transaction ID', 'sidrasalla-pay-woo'); ?>" />
    </p>
    <?php
}


            public function validate_fields()
            {

                // if transaction ID is not provided
                if (empty($_POST['txid'])) {
                    wc_add_notice(__('Transaction Hash مطلوب!', 'error'), 'error');
                    return false;
                }

                // if transaction ID is already used in an existing order
                if (get_posts(array('post_type' => 'shop_order', 'meta_key' => 'txid', 'meta_value' => $_POST['txid'], 'post_status' => 'any'))) {
                    wc_add_notice(__('Transaction ID is not correct.', 'error'), 'error');
                    return false;
                }
                return true;
            }

           public function process_payment($order_id)
{
    // Get the transaction ID from the POST data
    $txid = sanitize_text_field($_POST['txid']);

    // Let's connect to Sidra Chain API using cURL
    $curl = curl_init();

    // Configure cURL options
    $api_url = 'https://ledger.sidrachain.com/api/v2/transactions';
    $request_url = "{$api_url}?hash={$txid}";

    curl_setopt($curl, CURLOPT_URL, $request_url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_TIMEOUT, 30); // Set timeout to 30 seconds

    // Execute the cURL request
    $response = curl_exec($curl);

    // Check for cURL errors
    if (curl_errno($curl)) {
        wc_add_notice(__('Failed to connect to Sidra Chain.', 'error'), 'error');
        return false;
    }

    // Decode response body
    $response_data = json_decode($response);

    // Check response status code
    $response_code = curl_getinfo($curl, CURLINFO_RESPONSE_CODE);
    if ($response_code !== 200 || empty($response_data->items)) {
        wc_add_notice(__('Invalid transaction hash.', 'error'), 'error');
        return false;
    }

    // Transaction hash is valid, process the payment
    // You can add your payment processing logic here

    // Close cURL session
    curl_close($curl);

    // Get the order
    $order = wc_get_order($order_id);

    // Mark the order as complete
    $order->payment_complete();
    $order->reduce_order_stock();
    $order->add_meta_data('txid', $txid, true);
    $order->save();

    // Empty cart
    WC()->cart->empty_cart();

    // Redirect to the thank you page
    return array(
        'result'   => 'success',
        'redirect' => $this->get_return_url($order)
    );




            }
        }
    }
}
